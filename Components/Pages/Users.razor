@page "/users"
@inject UserService userService
@using OnlineLibrary.Models
@using OnlineLibrary.Data
@using OnlineLibrary.Services
@rendermode InteractiveServer

<PageTitle>User List</PageTitle>

<h1>User List</h1>
@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@users" Pagination="@pagination" class="table table-striped table-hover">
        <PropertyColumn Property="@(_ => _.FirstName)" Sortable="true" class="text-center" />
        <PropertyColumn Property="@(_ => _.LastName)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.Email)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.Country)" Sortable="true" />
        <PropertyColumn Property="@(_ => _.PostalCode)" Sortable="true" class="text-center" />
    </QuickGrid>

    <Paginator State="@pagination" />

}
@code {
    IQueryable<CustomUser>? users = new List<CustomUser>().AsQueryable();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    GridSort<CustomUser> sortByuse = GridSort<CustomUser>
    .ByDescending(_ => _.FirstName);
    protected override async Task OnInitializedAsync()
    {
        // Retrieve users from UserService
        IQueryable<CustomUser> users = (await userService.GetUserListAsync()).AsQueryable();
    }
}
