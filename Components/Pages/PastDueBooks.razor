@page "/pastDueBooks"
@inject BookService bookService
@using OnlineLibrary.Models
@using OnlineLibrary.Data
@using OnlineLibrary.Services
@using OnlineLibrary.Components
@rendermode InteractiveServer

<PageTitle>Past Due Book List</PageTitle>

<h1>Past Due Book List</h1>
<div class="table-responsive">
    <QuickGrid Items="@borrowTransactions" Pagination="@pagination" class="table table-striped table-hover">
        <PropertyColumn Property="@(_ => _.Book.Title)" Title="Title" Sortable="true" class="text-left"/>
        <PropertyColumn Property="@(_ => _.RentalDate.ToShortDateString())" Title="Rental Date" Sortable="true"/>
        <PropertyColumn Property="@(_ => _.EndDate.ToShortDateString())" Title="Due Date" Sortable="true" />
        <PropertyColumn Property="@(_ => _.Borrower.Email)" Title="Borrower Email" Sortable="true" />
        <TemplateColumn Title="Actions" >
            <nobr>
            <table>
                <tr>
                    <td style="width:30%">
                        <a class="btn btn-primary btn-sm" href="/BorrowTransaction/UpdateBookDueDate/@context.Id">Update</a>
                    </td>
                </tr>
            </table>
            </nobr>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />

@code {
    IQueryable<BorrowTransaction> borrowTransactions = new List<BorrowTransaction>().AsQueryable();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    GridSort<BorrowTransaction> sortByName = GridSort<BorrowTransaction>
    .ByAscending(_ => _.EndDate);
    protected override async Task OnInitializedAsync()
    {
        borrowTransactions = (await bookService.GetPastDueBookListAsync()).Cast<BorrowTransaction>().AsQueryable();
    }
    @* private async Task ExtendDueDate(int transactionId)
    {
        // Implement the logic to return the book using the transactionId
        // For example: await bookService.ReturnBookAsync(transactionId);
    } *@
}
